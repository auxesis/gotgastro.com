require 'rubygems'
Gem.path << File.expand_path(File.join(File.dirname(__FILE__), '..', 'gems'))

Dir['tasks/**/*.rake'].sort.each { |rakefile| load rakefile }

desc 'build site'
task :build do
  puts 'building'
  system("rm -rf output/")
  system("nanoc co")
end

desc 'deploy site'
task :deploy => :build do 
  puts 'deploying'
  system("rsync -auv --delete -e ssh output/* p:/srv/www/gotgastro.com/root/")
end

require 'yajl'
require 'dm-core'
require 'dm-validations'
require File.join(File.dirname(__FILE__), '..', 'scraper')
DataMapper.setup(:default, "sqlite3://#{File.expand_path(File.join(File.dirname(__FILE__), '..', 'gastro.db'))}")
require File.join(File.dirname(__FILE__), 'lib', 'models', 'notice')
require File.join(File.dirname(__FILE__), 'lib', 'models', 'penalty')
require File.join(File.dirname(__FILE__), 'lib', 'models', 'prosecution')
require File.join(File.dirname(__FILE__), 'lib', 'models', 'postcode')
require File.join(File.dirname(__FILE__), 'lib', 'models', 'suburb')

desc "create database to store penalties + prosecutions"
task :create_database do 
  DataMapper.auto_migrate!
end

desc "create penalties in database from geocoded data"
task :create_penalties do
  puts("Destroying existing penalties.")
  Penalty.all.destroy!

  penalties = read_yaml(:type => :penalties, :base => 'geocoded')
  puts("Have #{penalties.size} penalty notices to create.")
  sleep 2
  penalties.each do |notice|
    puts("Creating #{notice[:id]}")
    Penalty.create(notice)
  end
end

desc "create prosecutions in database from geocoded data"
task :create_prosecutions do
  puts("Destroying existing prosecutions.")
  Prosecution.all.destroy!

  prosecutions = read_yaml(:type => :prosecutions, :base => 'geocoded')
  puts("Have #{prosecutions.size} prosecution notices to create.")
  sleep 2
  prosecutions.each do |notice|
    puts("Creating #{notice[:id]}")
    Prosecution.create(notice)
  end
end

def read_json(filename)
  json = File.new(filename, 'r')
  yajl = Yajl::Parser.new
  data = yajl.parse(json)
end

desc "create postcodes in database from ABS business counts data"
task :create_postcodes do 
  puts "Destroying existing postcodes."
  Postcode.all.destroy!

  postcodes = read_json(File.join(File.dirname(__FILE__), '..', 'data', 'abs-business-counts', 'abs-8165009-intersected.json'))
  puts "Have #{postcodes.size} postcodes to create"
  sleep 2
  postcodes.each do |postcode|
    puts "Creating #{postcode['postcode']}"
    Postcode.create(postcode)
  end

end

desc "upgrade database schema"
task :upgrade_database do 
  DataMapper.auto_upgrade!
end

desc "create suburbs from ABS business counts/Australia post data"
task :create_suburbs do 
  puts "Destroying existing suburbs."
  Suburb.all.destroy!

  suburbs = read_json(File.join(File.dirname(__FILE__), '..', 'data', 'auspost-postcodes', 'auspost-postcodes.json'))
  puts "Have #{suburbs.size} suburbs to create"
  sleep 2
  suburbs.each do |suburb|
    puts "Creating #{suburb['suburb']}"
    Suburb.create(suburb)
  end
end


